                            | #######################################################################
                            | # Test for copying block of size 5;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e804000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20500000000000000 | 	irmovq $5, %rdx		# src and dst have 5 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 809002000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # author: asciibase64
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 30f10500000000000000 | 	irmovq $5, %rcx		# min = 5;
0x047: 703101000000000000   | 	jmp Check
                            | 
0x050:                      | Loop:	
0x050: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x05a: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11 #read val from src for Loop2
0x064: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06e: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x070: 718300000000000000   | 	jle Loop2			# if so, goto Loop2:
0x079: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x083:                      | Loop2:
0x083: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src for Loop3
0x08d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# use the val from Loop and store it to dst
0x097: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x099: 71ac00000000000000   | 	jle Loop3			# if so, goto Loop3:
0x0a2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ac:                      | Loop3:
0x0ac: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0b6: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c0: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c2: 71d500000000000000   | 	jle Loop4			# if so, goto Loop4:
0x0cb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d5:                      | Loop4:
0x0d5: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x0df: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0e9: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0eb: 71fe00000000000000   | 	jle Loop5			# if so, goto Loop5:
0x0f4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fe:                      | Loop5:
0x0fe: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x108: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x10a: 711d01000000000000   | 	jle Npos			# if so, goto Npos:
0x113: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x11d:                      | Npos:	
0x11d: c0f72800000000000000 | 	iaddq $40, %rdi		# src++
0x127: c0f62800000000000000 | 	iaddq $40, %rsi		# dst++
0x131:                      | Check:
0x131: 6112                 | 	subq %rcx,%rdx		# len > min (len -= min at the same time)?
0x133: 765000000000000000   | 	jg Loop			    # if so, goto Loop:
                            | 
0x13c:                      | BeforeLastCheck:
0x13c: 6012                 | 	addq %rcx, %rdx	# Because our Check do len -= min at the same time, we have to add min back
                            | 
0x13e:                      | FirstLastCheck:
0x13e: 6222                 | 	andq %rdx, %rdx
0x140: 718f02000000000000   | 	jle Done
                            | 
0x149:                      | LastLoop:
0x149: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x153: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x15d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x167: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x169: 717c01000000000000   | 	jle LastCheck		# if so, goto LastCheck:
0x172: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x17c:                      | LastCheck:
0x17c: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x186: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x190: 6222                 | 	andq %rdx, %rdx
0x192: 718f02000000000000   | 	jle Done
0x19b:                      | LastLoop2:
0x19b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1a5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1af: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1b9: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1bb: 71ce01000000000000   | 	jle LastCheck2		# if so, goto LastCheck2:
0x1c4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1ce:                      | LastCheck2:
0x1ce: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x1d8: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x1e2: 6222                 | 	andq %rdx, %rdx
0x1e4: 718f02000000000000   | 	jle Done
0x1ed:                      | LastLoop3:
0x1ed: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1f7: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x201: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x20b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x20d: 712002000000000000   | 	jle LastCheck3		# if so, goto LastCheck3:
0x216: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x220:                      | LastCheck3:
0x220: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x22a: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x234: 6222                 | 	andq %rdx, %rdx
0x236: 718f02000000000000   | 	jle Done
0x23f:                      | LastLoop4:
0x23f: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x249: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x253: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x25d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x25f: 717202000000000000   | 	jle LastCheck4		# if so, goto LastCheck4:
0x268: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x272:                      | LastCheck4:
0x272: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x27c: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x286: 708f02000000000000   | 	jmp Done
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x28f:                      | Done:
0x28f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x290:                      | End:
                            | #/* $end ncopy-ys */
0x290:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 3.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x290:                      | check:
                            | 	# Return value test
0x290: 30fa0300000000000000 | 	irmovq $3,%r10
0x29a: 61a0                 | 	subq %r10,%rax
0x29c: 73b802000000000000   | 	je checkb
0x2a5: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2af: 70f603000000000000   | 	jmp cdone
0x2b8:                      | checkb:
                            | 	# Code length check
0x2b8: 30f09002000000000000 | 	irmovq EndFun,%rax
0x2c2: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2cc: 6120                 | 	subq %rdx,%rax
0x2ce: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2d8: 6102                 | 	subq %rax,%rdx
0x2da: 75f602000000000000   | 	jge checkm
0x2e3: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2ed: 70f603000000000000   | 	jmp cdone
0x2f6:                      | checkm:
0x2f6: 30f23804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x300: 30f3f803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x30a: 30f70500000000000000 | 	irmovq $5,%rdi  # Count
0x314: 6277                 | 	andq %rdi,%rdi
0x316: 737403000000000000   | 	je checkpre         # Skip check if count = 0
0x31f:                      | mcloop:
0x31f: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x329: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x333: 6160                 | 	subq %rsi,%rax
0x335: 735103000000000000   | 	je  mok
0x33e: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x348: 70f603000000000000   | 	jmp cdone
0x351:                      | mok:
0x351: 30f00800000000000000 | 	irmovq $8,%rax
0x35b: 6002                 | 	addq %rax,%rdx	  # dest ++
0x35d: 6003                 | 	addq %rax,%rbx    # src++
0x35f: 30f00100000000000000 | 	irmovq $1,%rax
0x369: 6107                 | 	subq %rax,%rdi    # cnt--
0x36b: 761f03000000000000   | 	jg mcloop
0x374:                      | checkpre:
                            | 	# Check for corruption
0x374: 30f23004000000000000 | 	irmovq Predest,%rdx
0x37e: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x388: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x392: 6120                 | 	subq %rdx,%rax
0x394: 73b003000000000000   | 	je checkpost
0x39d: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3a7: 70f603000000000000   | 	jmp cdone
0x3b0:                      | checkpost:
                            | 	# Check for corruption
0x3b0: 30f26004000000000000 | 	irmovq Postdest,%rdx
0x3ba: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3c4: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3ce: 6120                 | 	subq %rdx,%rax
0x3d0: 73ec03000000000000   | 	je checkok
0x3d9: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3e3: 70f603000000000000   | 	jmp cdone
0x3ec:                      | checkok:
                            | 	# Successful checks
0x3ec: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x3f6:                      | cdone:
0x3f6: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3f8:                      | 	.align 8
0x3f8:                      | src:
0x3f8: 0100000000000000     | 	.quad 1
0x400: 0200000000000000     | 	.quad 2
0x408: 0300000000000000     | 	.quad 3
0x410: fcffffffffffffff     | 	.quad -4
0x418: fbffffffffffffff     | 	.quad -5
0x420: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460:                      | Postdest:
0x460: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x468:                      | .align 8
                            | # Run time stack
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
                            | 
0x4e8:                      | Stack:

                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # author: asciibase64
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f10500000000000000 | 	irmovq $5, %rcx		# min = 5;
0x03e: 702801000000000000   | 	jmp Check
                            | 
0x047:                      | Loop:	
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x051: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11 #read val from src for Loop2
0x05b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x065: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x067: 717a00000000000000   | 	jle Loop2			# if so, goto Loop2:
0x070: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x07a:                      | Loop2:
0x07a: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src for Loop3
0x084: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# use the val from Loop and store it to dst
0x08e: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x090: 71a300000000000000   | 	jle Loop3			# if so, goto Loop3:
0x099: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a3:                      | Loop3:
0x0a3: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0ad: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0b7: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b9: 71cc00000000000000   | 	jle Loop4			# if so, goto Loop4:
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0cc:                      | Loop4:
0x0cc: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x0d6: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0e0: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e2: 71f500000000000000   | 	jle Loop5			# if so, goto Loop5:
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f5:                      | Loop5:
0x0f5: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0ff: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x101: 711401000000000000   | 	jle Npos			# if so, goto Npos:
0x10a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x114:                      | Npos:	
0x114: c0f72800000000000000 | 	iaddq $40, %rdi		# src++
0x11e: c0f62800000000000000 | 	iaddq $40, %rsi		# dst++
0x128:                      | Check:
0x128: 6112                 | 	subq %rcx,%rdx		# len > min (len -= min at the same time)?
0x12a: 754700000000000000   | 	jge Loop			    # if so, goto Loop:
                            | 
0x133:                      | BeforeLastCheck:
0x133: 6012                 | 	addq %rcx, %rdx	# Because our Check do len -= min at the same time, we have to add 5 back
0x135: 708402000000000000   | 	jmp FirstLastCheck
                            | 
0x13e:                      | LastLoop:
0x13e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x148: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x152: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x15c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15e: 717101000000000000   | 	jle LastCheck		# if so, goto LastCheck:
0x167: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x171:                      | LastCheck:
0x171: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x17b: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x185: 6222                 | 	andq %rdx, %rdx
0x187: 718f02000000000000   | 	jle Done
0x190:                      | LastLoop2:
0x190: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x19a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1a4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ae: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1b0: 71c301000000000000   | 	jle LastCheck2		# if so, goto LastCheck2:
0x1b9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1c3:                      | LastCheck2:
0x1c3: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x1cd: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x1d7: 6222                 | 	andq %rdx, %rdx
0x1d9: 718f02000000000000   | 	jle Done
0x1e2:                      | LastLoop3:
0x1e2: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1ec: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1f6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x200: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x202: 711502000000000000   | 	jle LastCheck3		# if so, goto LastCheck3:
0x20b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x215:                      | LastCheck3:
0x215: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x21f: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x229: 6222                 | 	andq %rdx, %rdx
0x22b: 718f02000000000000   | 	jle Done
0x234:                      | LastLoop4:
0x234: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x23e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x248: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x252: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x254: 716702000000000000   | 	jle LastCheck4		# if so, goto LastCheck4:
0x25d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x267:                      | LastCheck4:
0x267: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x271: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x27b: 708f02000000000000   | 	jmp Done
                            | 
0x284:                      | FirstLastCheck:
0x284: 6222                 | 	andq %rdx, %rdx
0x286: 763e01000000000000   | 	jg LastLoop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x28f:                      | Done:
0x28f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x290:                      | End:
                            | #/* $end ncopy-ys */
0x290:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x290:                      | 	.align 8
0x290:                      | src:
0x290: ffffffffffffffff     | 	.quad -1
0x298: 0200000000000000     | 	.quad 2
0x2a0: fdffffffffffffff     | 	.quad -3
0x2a8: 0400000000000000     | 	.quad 4
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2c0:                      | 	.align 16
0x2c0:                      | Predest:
0x2c0: fadebc0000000000     | 	.quad 0xbcdefa
0x2c8:                      | dest:
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0: abefcd0000000000     | 	.quad 0xcdefab
0x2d8: abefcd0000000000     | 	.quad 0xcdefab
0x2e0: abefcd0000000000     | 	.quad 0xcdefab
0x2e8:                      | Postdest:
0x2e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2f0:                      | .align 8
                            | # Run time stack
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
                            | 
0x370:                      | Stack:
